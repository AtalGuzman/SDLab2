################# Variables de la red ################

# Tama√±o de la Red
SIZE 5

# Cantidad de ciclos que se deseen para la ejecuci√≥n de la simulaci√≥n

CYCLES 10
#CYCLE SIZE*100
CYCLE 1000

# Delay existente en la transferencia del mensaje,
# el cual es un porcentaje relativo al tama√±o
# del ciclo
MINDELAY 0
MAXDELAY 50

# Probabilidad de ca√≠da en el mensaje enviado
# DROP var√≠a entre 0 y 1
DROP 0

################ Par√°metros de la red #############

# Semilla del valor Random
random.seed 125289

# Tama√±o de la red
network.size SIZE+1

# Tipo de nodo a utilizar en la red
network.node cl.usach.sd.SNode3

# Frecuencia en que se realiza cada etapa
#Estos par·metros est·n definidos para evitar superposiciÛn de mensajes haciendo la revisiÛn m·s sencilla, pero son totalmente 
#modificables
OBSERVER_STEP CYCLE
TRAFFIC_STEP CYCLE*2

#OBSERVER_STEP 1000
#TRAFFIC_STEP 200

# Tiempo de t√©rmino en la simulaci√≥n
simulation.endtime CYCLE*CYCLES
simulation.logtime CYCLE*CYCLES

###########################################################
# Todos los componentes tienen la estructura de la        #
# siguiente forma:                                        #
# <protocol|init|control>.string_id [full_path_]classname #
# <protocol|init|control>.string_id.parameter_name        #
###########################################################

################### Protocolos #####################

# IdleProtocol: Es un paquete principal de Peersim, 
# el cual incluye que cada nodo sea responsable por
# establecer la comunicaci√≥n con sus vecinos
protocol.0link peersim.core.IdleProtocol

protocol.1urt UniformRandomTransport
protocol.1urt.mindelay (CYCLE*MINDELAY)/100
protocol.1urt.maxdelay (CYCLE*MAXDELAY)/100

protocol.2tr UnreliableTransport
protocol.2tr.transport 1urt
protocol.2tr.drop DROP

protocol.3layer cl.usach.sd.Layer
protocol.3layer.linkable 0link
protocol.3layer.step CYCLE/2
protocol.3layer.transport 2tr

################### Inicializaci√≥n ###################

# WireKOut: Toma un protocolo Linkable y a√±ade K
# conexiones de manera random. La variable undir
# es para indicar que es direccionada la conexi√≥n
init.0rndlink WireKOut
init.0rndlink.k 0
init.0rndlink.undir true
init.0rndlink.protocol 0link

init.1statebuilder cl.usach.sd.Initialization
init.1statebuilder.protocol 3layer
init.1statebuilder.transport 2tr

############### PARAMETROS DE BD, CACHE Y DISTANCIAS ################
init.1statebuilder.s SIZE #Cantidad de superpeer
init.1statebuilder.n 1 #Cantidad mÌnima de peer por sub-red
init.1statebuilder.m 10 #Cantidad m·xima de peer por sub-red
init.1statebuilder.c 3 #TamaÒo cachÈ de super-peer
init.1statebuilder.b 9 #TamaÒo base de datos de peer
init.1statebuilder.k 1 #Cantidad de random walks paralelos
init.1statebuilder.ttl 2#TTL de los random walks

################### Control ######################


#control.0traffic cl.usach.sd.TrafficGenerator
#control.0traffic.protocol 3layer
#control.0traffic.step TRAFFIC_STEP

control.1observer cl.usach.sd.Observer
control.1observer.protocol 3layer
control.1observer.step OBSERVER_STEP